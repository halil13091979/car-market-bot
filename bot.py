import logging
from flask import Flask, request
from telegram import Bot
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7807736400:AAFCb_0m79n603AmL6Q9UDtIBxQ0m2m2rCc"
CHANNEL_ID = "-1002630184427"
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
ads_storage = []

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Car Market Bot</title>
    </head>
    <body>
        <h1>Car Market Bot</h1>
        <h2>–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</h2>
        <form method="POST" action="/add_ad">
            <textarea name="data" rows="4" cols="50" placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"></textarea>
            <br>
            <button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button>
        </form>
        <h2>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</h2>
        <ul>
    """
    for ad in ads_storage:
        html_content += f"<li>{ad}</li>"
    html_content += """
        </ul>
    </body>
    </html>
    """
    return html_content

@app.route('/add_ad', methods=['POST'])
def add_ad():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    data = request.form.get("data")
    if not data:
        return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", 400

    hashtags = generate_hashtags(data)
    ad_text = f"üöó –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{data}\n\n{hashtags}"
    ads_storage.append(ad_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    try:
        bot = Bot(TOKEN)
        bot.send_message(chat_id=CHANNEL_ID, text=ad_text)
        logger.info("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", 500

    return "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", 200

def generate_hashtags(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤"""
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: %s", data)
    hashtags = []
    for word in data.split():
        if word.isdigit():
            hashtags.append(f"#{word}")
        else:
            hashtags.append(f"#{word.capitalize()}")
    return " ".join(hashtags)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
